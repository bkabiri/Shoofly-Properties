# syntax=docker/dockerfile:1

##########
# Builder
##########
ARG RUBY_VERSION=3.0.3
FROM ruby:${RUBY_VERSION}-slim AS builder

# Install system deps needed to build gems and precompile assets
RUN apt-get update && apt-get install -y --no-install-recommends \
  build-essential \
  git \
  libpq-dev \
  libvips \
  libvips-dev \
  imagemagick \
  curl \
  ca-certificates \
  && rm -rf /var/lib/apt/lists/*

# Install Node + Yarn for ExecJS (asset compilation only)
# (apt nodejs can be old; use NodeSource for a modern LTS)
ARG NODE_MAJOR=20
RUN curl -fsSL https://deb.nodesource.com/setup_${NODE_MAJOR}.x | bash - \
  && apt-get install -y --no-install-recommends nodejs \
  && corepack enable \
  && corepack prepare yarn@stable --activate \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Ruby/Bundler setup + dependency caching
ENV BUNDLE_DEPLOYMENT=1 \
    BUNDLE_WITHOUT="development:test" \
    BUNDLE_JOBS=4 \
    BUNDLE_RETRY=3

# Pre-copy only Gemfiles to leverage Docker layer cache
COPY Gemfile Gemfile.lock ./
RUN gem install bundler -v 2.3.7 \
 && bundle install

# App code
COPY . .

# Precompile assets for production with a dummy secret
# NOTE: SECRET_KEY_BASE is only needed to compile certain assets; use a throwaway value at build time.
ENV RAILS_ENV=production \
    RACK_ENV=production
RUN SECRET_KEY_BASE=dummy bundle exec rails assets:precompile

#############
# Final image
#############
FROM ruby:${RUBY_VERSION}-slim

# Minimal runtime deps only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libvips \
    imagemagick \
    postgresql-client \
  && rm -rf /var/lib/apt/lists/*

# App directory
WORKDIR /app

# Copy app and gems from builder
COPY --from=builder /usr/local/bundle /usr/local/bundle
COPY --from=builder /app /app

# Environment for prod runtime
ENV RAILS_ENV=production \
    RACK_ENV=production \
    RAILS_LOG_TO_STDOUT=1 \
    RAILS_SERVE_STATIC_FILES=1 \
    BUNDLE_DEPLOYMENT=1 \
    BUNDLE_WITHOUT="development:test"

# Create a non-root user and fix permissions
RUN useradd -u 1001 -m -d /home/app app \
  && chown -R app:app /app /usr/local/bundle
USER app

# Entrypoint handles DB prepare & stale PID
ENTRYPOINT ["./entrypoint.sh"]

EXPOSE 3000

# Puma defaults; tune via env (WEB_CONCURRENCY, MAX_THREADS, etc.)
CMD ["bash", "-lc", "bundle exec puma -C config/puma.rb"]