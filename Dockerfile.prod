# syntax=docker/dockerfile:1

##########
# Builder
##########
ARG RUBY_VERSION=3.0.3
FROM ruby:${RUBY_VERSION} AS builder

ENV RAILS_ENV=production \
    BUNDLE_DEPLOYMENT=1 \
    BUNDLE_WITHOUT="development:test" \
    RAILS_LOG_TO_STDOUT=1 \
    RAILS_SERVE_STATIC_FILES=1

# System deps needed to install gems and (if we ever precompile) assets
RUN apt-get update && apt-get install -y --no-install-recommends \
  build-essential libpq-dev git nodejs yarn libvips libvips-dev imagemagick \
  && rm -rf /var/lib/apt/lists/*
# Debian provides /usr/bin/nodejs but ExecJS expects /usr/bin/node (for asset builds)
RUN ln -sf /usr/bin/nodejs /usr/bin/node && node -v

WORKDIR /usr/src/app

# Bundle cache
COPY Gemfile Gemfile.lock ./
RUN gem install bundler -v 2.3.7 \
 && bundle config set deployment 'true' \
 && bundle config set without 'development test' \
 && bundle install --jobs 4 --retry 3

# App code (no precompile here)
COPY . .

#############
# Final image
#############
FROM ruby:${RUBY_VERSION}

# Runtime deps only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libvips imagemagick postgresql-client \
 && rm -rf /var/lib/apt/lists/*

WORKDIR /usr/src/app

# Bring the app and gems over
COPY --from=builder /usr/src/app /usr/src/app
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Entrypoint handles assets/db and then execs puma
COPY entrypoint.sh /usr/src/app/entrypoint.sh
RUN chmod +x /usr/src/app/entrypoint.sh

ENV RAILS_ENV=production \
    BUNDLE_DEPLOYMENT=1 \
    BUNDLE_WITHOUT="development:test" \
    RAILS_LOG_TO_STDOUT=1 \
    RAILS_SERVE_STATIC_FILES=1

EXPOSE 3000
ENTRYPOINT ["/usr/src/app/entrypoint.sh"]
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]